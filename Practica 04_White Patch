# LIBRERIAS #
import cv2
import numpy as np


# LEER - MORSTRAR Y GUARDAR IMAGENES #
# VARIABLES Y COPIAS #
#################################################
ruta = "cucharas.jpg"
imagen_original = cv2.imread(ruta) #Asignamos una variable a la imagen que queremos
imagen_copia=imagen_original.copy()
imagen_color1=imagen_original.copy()
imagen_color2=imagen_original.copy()
imagen_color3=imagen_original.copy()
m,n,c=imagen_original.shape
imagen_original=imagen_original.astype(np.float32)
################################################

# CAMBIAR COLOR #
#################################################
imagen_color1[:,:,0]=imagen_color1[:,:,0]*.85
imagen_color2[:,:,1]=imagen_color2[:,:,1]*.85
imagen_color3[:,:,2]=imagen_color3[:,:,2]*.85

cv2.imwrite("Imagen05_color1.jpg",imagen_color1)
cv2.imwrite("Imagen05_color2.jpg",imagen_color2)
cv2.imwrite("Imagen05_color3.jpg",imagen_color3)
cv2.imshow("imagencolor1",imagen_color1)
cv2.imshow("imagencolor2",imagen_color2)
cv2.imshow("imagencolor3",imagen_color3)
cv2.waitKey(0)
#################################################


# WHITE PACH #
################################################
def white_balance(imagen_color, save):
    img_bal = cv2.cvtColor(imagen_color, cv2.COLOR_BGR2LAB)
    avg_a = np.average(img_bal[:, :, 1])
    avg_b = np.average(img_bal[:, :, 2])
    img_bal[:, :, 1] = img_bal[:, :, 1] - ((avg_a - 128) * (img_bal[:, :, 0] / 255.0) * 0.6)
    img_bal[:, :, 2] = img_bal[:, :, 2] - ((avg_b - 128) * (img_bal[:, :, 0] / 255.0) * 0.6)
    balanced_image = cv2.cvtColor(img_bal, cv2.COLOR_LAB2BGR)
    cv2.imshow(save, balanced_image)
    cv2.imwrite(save+".jpg",balanced_image)
    return balanced_image

imagen_white_1 = white_balance(imagen_copia,"Imagen06_White Patch_1")
cv2.waitKey(0)
imagen_white_2 = white_balance(imagen_color1,"Imagen06_White Patch_2")
cv2.waitKey(0)
imagen_white_3 = white_balance(imagen_color2,"Imagen06_White Patch_3")
cv2.waitKey(0)
imagen_white_4 = white_balance(imagen_color3,"Imagen06_White Patch_4")
cv2.waitKey(0)
################################################


# CLASIFICADOR #
################################################
def clasificador_original(imagen_original_1,save):
    imagen_blanconegro1=np.zeros((m,n))
    for x in range(m):
        for y in range(n):
            if  0<imagen_original[x,y,0]<130 \
                and 50<imagen_original[x,y,1]<235 \
                    and 98<imagen_original[x,y,2]<235:
                imagen_blanconegro1[x,y]=255
    cv2.imshow(save, imagen_blanconegro1)
    cv2.imwrite(save+".jpg",imagen_blanconegro1)
    return imagen_blanconegro1

clasificador_original(imagen_copia,"Imagen07_Clasificador original 1")
clasificador_original(imagen_color1,"Imagen07_Clasificador original 2")
clasificador_original(imagen_color2,"Imagen07_Clasificador original 3")
clasificador_original(imagen_color3,"Imagen07_Clasificador original 4")
cv2.waitKey(0)
################################################


# CLASIFICADOR ADAPTADO #
################################################
def clasificador_adaptado(imagen_original_1,save):
    imagen_blanconegro1=np.zeros((m,n))
    for x in range(m):
        for y in range(n):
            if  6 <imagen_original_1[x,y,0]< 150  \
                and 25 < imagen_original_1[x,y,1] < 190 \
                    and 100<imagen_original_1[x,y,2]<240:
                imagen_blanconegro1[x,y]=255
    cv2.imshow(save, imagen_blanconegro1)
    cv2.imwrite(save+".jpg",imagen_blanconegro1)
    return imagen_blanconegro1

clasificador_adaptado(imagen_white_1,"Imagen08_Clasificador adaptado 1")
clasificador_adaptado(imagen_white_2,"Imagen08_Clasificador adaptado 2")
clasificador_adaptado(imagen_white_3,"Imagen08_Clasificador adaptado 3")
clasificador_adaptado(imagen_white_4,"Imagen08_Clasificador adaptado 4")
################################################



cv2.waitKey(0)
cv2.destroyAllWindows()
